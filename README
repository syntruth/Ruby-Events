
This is a very simplistic events callback library in Ruby. Simplistic in the
fact that it's meant more for very simple projects that can benefit from an 
event observation model. By default, it does not handle events in Threads,
though threads can be turned on with the set_threaded_events() method.

This is a stand-alone lib, with no requirements.  Full docs are in docs/
of course.

Here's a simple example:

  require "events"

  create_event(:laugh)

  has_event?(:event)
    => false
  has_event?(:laugh)
    => true

  are_events_threaded?
    => false

  # All handler callbacks are now handed in threads.
  set_threaded_events(true)

  hid1 = observe_event(:laugh) do |event, args|
    puts "%s is laughing!" % who.first()
  end

  emit_event(:laugh, "Syntruth")
    => Syntruth is laughing!

  hid2 = observe_event(:laugh) do |event, args|
    puts "Somebody is laughing!"
  end

  emit_event(:laugh, "Syntruth")
    => Syntruth is laughing!
    => Somebody is laughing!

  silence_event(:laugh)

  emit_event(:laugh, "Syntruth")
    => ...nada...

  unsilence_event(:laugh)

  silence_event(:laugh) do
    # This will also produce no output.
    emit_event(:laugh, "Syntruth")
  end

  unobserve_event(:laugh, hid2)

  emit_event(:laugh, "Syntruth")
    => "Syntruth is laughing!"

  unobserve_event(:laugh, hid1)

  emit_event(:laugh, "Syntruth")
    => ...nobody is laughing now.

